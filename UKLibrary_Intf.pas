unit UKLibrary_Intf;

// ----------------------------------------------------------------------
//  This file was automatically generated by Remoting SDK from a
//  RODL file downloaded from a server or associated with this project.
//
//  Do not modify this file manually, or your changes will be lost when
//  it is regenerated the next time you update your RODL.
// ----------------------------------------------------------------------

{$I RemObjects.inc}

interface

uses
  {$IFDEF DELPHIXE2UP}System.SysUtils{$ELSE}SysUtils{$ENDIF},
  {$IFDEF DELPHIXE2UP}System.Classes{$ELSE}Classes{$ENDIF},
  {$IFDEF DELPHIXE2UP}System.TypInfo{$ELSE}TypInfo{$ENDIF},
  uROEncoding,
  uROUri,
  uROProxy,
  uROExceptions,
  uROXMLIntf,
  uROClasses,
  uROTypes,
  uROClientIntf,
  uROAsync,
  uROEventReceiver;

const LibraryUID: String = '{D602FDCE-8833-4895-8027-727146F6C860}';
const DefaultNamespace: String = 'UKLibrary';
const TargetNamespace: String = 'UKLibrary';
const IAppService_IID: TGUID = '{3EE08AE2-36C4-47A9-9E58-54BA2DD480CE}';
const ILogonService_IID: TGUID = '{0C18D93C-6FF5-49BC-B4D3-E192A2581082}';
type
  { Forward declarations }
  ILogonService = interface;
  ILogonService_Async = interface;
  ILogonService_AsyncEx = interface;
  IAppService = interface;
  IAppService_Async = interface;
  IAppService_AsyncEx = interface;
  CoLogonService = class;
  CoLogonService_Async = class;
  CoLogonService_AsyncEx = class;
  TLogonService_Proxy = class;
  TLogonService_AsyncProxy = class;
  TLogonService_AsyncProxyEx = class;
  CoAppService = class;
  CoAppService_Async = class;
  CoAppService_AsyncEx = class;
  TAppService_Proxy = class;
  TAppService_AsyncProxy = class;
  TAppService_AsyncProxyEx = class;

  ILogonService = interface(IROService)
  ['{0C18D93C-6FF5-49BC-B4D3-E192A2581082}']
    function _ClientConn(const ClientInfo: IXmlNode; out ServerInfo: IXmlNode): Boolean;
  end;

  ILogonService_Async = interface(IROAsyncInterface)
  ['{9F137739-FAE3-4B0C-B34B-EE5D1F5C9CA2}']
    procedure Invoke__ClientConn(const ClientInfo: IXmlNode);
    function Retrieve__ClientConn(out ServerInfo: IXmlNode): Boolean;
  end;

  ILogonService_AsyncEx = interface(IROAsyncInterfaceEx)
  ['{2453AC95-BDC8-4FB5-A7E2-C65B177C6593}']
    function Begin_ClientConn(const ClientInfo: IXmlNode; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function End_ClientConn(out ServerInfo: IXmlNode; const aRequest: IROAsyncRequest): Boolean;
  end;

  CoLogonService = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): ILogonService; overload;
    class function Create(const aUri: TROUri; aDefaultNamespaces: String = ''): ILogonService; overload;
    class function Create(const aUrl: String; aDefaultNamespaces: String = ''): ILogonService; overload;
  end;

  CoLogonService_Async = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): ILogonService_Async; overload;
    class function Create(const aUri: TROUri; aDefaultNamespaces: String = ''): ILogonService_Async; overload;
    class function Create(const aUrl: String; aDefaultNamespaces: String = ''): ILogonService_Async; overload;
  end;

  CoLogonService_AsyncEx = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): ILogonService_AsyncEx; overload;
    class function Create(const aUri: TROUri; aDefaultNamespaces: String = ''): ILogonService_AsyncEx; overload;
    class function Create(const aUrl: String; aDefaultNamespaces: String = ''): ILogonService_AsyncEx; overload;
  end;

  TLogonService_Proxy = class(TROProxy, ILogonService)
  protected
    function __GetInterfaceName: String; override;
    function _ClientConn(const ClientInfo: IXmlNode; out ServerInfo: IXmlNode): Boolean;
  end;

  TLogonService_AsyncProxy = class(TROAsyncProxy, ILogonService_Async)
  protected
    function __GetInterfaceName: String; override;
    procedure Invoke__ClientConn(const ClientInfo: IXmlNode);
    function Retrieve__ClientConn(out ServerInfo: IXmlNode): Boolean;
  end;

  TLogonService_AsyncProxyEx = class(TROAsyncProxyEx, ILogonService_AsyncEx)
  protected
    function __GetInterfaceName: String; override;
    function Begin_ClientConn(const ClientInfo: IXmlNode; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function End_ClientConn(out ServerInfo: IXmlNode; const aRequest: IROAsyncRequest): Boolean;
  end;

  IAppService = interface(IROService)
  ['{3EE08AE2-36C4-47A9-9E58-54BA2DD480CE}']
    function GetSessionID(const NewParam: UnicodeString): UnicodeString;
  end;

  IAppService_Async = interface(IROAsyncInterface)
  ['{F1F98A24-0759-41D8-9A73-0E8A90691C97}']
    procedure Invoke_GetSessionID(const NewParam: UnicodeString);
    function Retrieve_GetSessionID: UnicodeString;
  end;

  IAppService_AsyncEx = interface(IROAsyncInterfaceEx)
  ['{62514DDE-E03A-450D-AA4C-074FD19A61E5}']
    function BeginGetSessionID(const NewParam: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function EndGetSessionID(const aRequest: IROAsyncRequest): UnicodeString;
  end;

  CoAppService = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IAppService; overload;
    class function Create(const aUri: TROUri; aDefaultNamespaces: String = ''): IAppService; overload;
    class function Create(const aUrl: String; aDefaultNamespaces: String = ''): IAppService; overload;
  end;

  CoAppService_Async = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IAppService_Async; overload;
    class function Create(const aUri: TROUri; aDefaultNamespaces: String = ''): IAppService_Async; overload;
    class function Create(const aUrl: String; aDefaultNamespaces: String = ''): IAppService_Async; overload;
  end;

  CoAppService_AsyncEx = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IAppService_AsyncEx; overload;
    class function Create(const aUri: TROUri; aDefaultNamespaces: String = ''): IAppService_AsyncEx; overload;
    class function Create(const aUrl: String; aDefaultNamespaces: String = ''): IAppService_AsyncEx; overload;
  end;

  TAppService_Proxy = class(TROProxy, IAppService)
  protected
    function __GetInterfaceName: String; override;
    function GetSessionID(const NewParam: UnicodeString): UnicodeString;
  end;

  TAppService_AsyncProxy = class(TROAsyncProxy, IAppService_Async)
  protected
    function __GetInterfaceName: String; override;
    procedure Invoke_GetSessionID(const NewParam: UnicodeString);
    function Retrieve_GetSessionID: UnicodeString;
  end;

  TAppService_AsyncProxyEx = class(TROAsyncProxyEx, IAppService_AsyncEx)
  protected
    function __GetInterfaceName: String; override;
    function BeginGetSessionID(const NewParam: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function EndGetSessionID(const aRequest: IROAsyncRequest): UnicodeString;
  end;

function DefaultNamespaces: String;
implementation

uses
  uROSerializer,
  uROClient,
  uROTransportChannel,
  uRORes;

function DefaultNamespaces: String;
var
  lres: String;
begin
  lres := DefaultNamespace;
  result := lres;
  exit;
end;

type
  { Forward declarations }
  TMyTransportChannel = class;

  TMyTransportChannel = class(TROTransportChannel)
  end;

class function CoLogonService.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): ILogonService;
begin
  result := TLogonService_Proxy.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoLogonService.Create(const aUri: TROUri; aDefaultNamespaces: String = ''): ILogonService;
begin
  result := TLogonService_Proxy.Create(aUri, aDefaultNamespaces);
  exit;
end;

class function CoLogonService.Create(const aUrl: String; aDefaultNamespaces: String = ''): ILogonService;
begin
  result := TLogonService_Proxy.Create(aUrl, aDefaultNamespaces);
  exit;
end;

class function CoLogonService_Async.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): ILogonService_Async;
begin
  result := TLogonService_AsyncProxy.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoLogonService_Async.Create(const aUri: TROUri; aDefaultNamespaces: String = ''): ILogonService_Async;
begin
  result := TLogonService_AsyncProxy.Create(aUri, aDefaultNamespaces);
  exit;
end;

class function CoLogonService_Async.Create(const aUrl: String; aDefaultNamespaces: String = ''): ILogonService_Async;
begin
  result := TLogonService_AsyncProxy.Create(aUrl, aDefaultNamespaces);
  exit;
end;

class function CoLogonService_AsyncEx.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): ILogonService_AsyncEx;
begin
  result := TLogonService_AsyncProxyEx.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoLogonService_AsyncEx.Create(const aUri: TROUri; aDefaultNamespaces: String = ''): ILogonService_AsyncEx;
begin
  result := TLogonService_AsyncProxyEx.Create(aUri, aDefaultNamespaces);
  exit;
end;

class function CoLogonService_AsyncEx.Create(const aUrl: String; aDefaultNamespaces: String = ''): ILogonService_AsyncEx;
begin
  result := TLogonService_AsyncProxyEx.Create(aUrl, aDefaultNamespaces);
  exit;
end;

function TLogonService_Proxy.__GetInterfaceName: String;
begin
  result := 'LogonService';
  exit;
end;

function TLogonService_Proxy._ClientConn(const ClientInfo: IXmlNode; out ServerInfo: IXmlNode): Boolean;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Boolean;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'UKLibrary', __InterfaceName, '_ClientConn');
    lMessage.Write('ClientInfo', System.TypeInfo(IXmlNode), ClientInfo, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Boolean), lResult, []);
    lMessage.Read('ServerInfo', System.TypeInfo(IXmlNode), ServerInfo, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TLogonService_AsyncProxy.__GetInterfaceName: String;
begin
  result := 'LogonService';
  exit;
end;

procedure TLogonService_AsyncProxy.Invoke__ClientConn(const ClientInfo: IXmlNode);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('_ClientConn');

    lMessage.InitializeRequestMessage(lTransportChannel, 'UKLibrary', __InterfaceName, '_ClientConn');
    lMessage.Write('ClientInfo', System.TypeInfo(IXmlNode), ClientInfo, []);
    __DispatchAsyncRequest('_ClientConn', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TLogonService_AsyncProxy.Retrieve__ClientConn(out ServerInfo: IXmlNode): Boolean;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Boolean;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('_ClientConn');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Boolean), lResult, []);
        lMessage.Read('ServerInfo', System.TypeInfo(IXmlNode), ServerInfo, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free();
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TLogonService_AsyncProxyEx.__GetInterfaceName: String;
begin
  result := 'LogonService';
  exit;
end;

function TLogonService_AsyncProxyEx.Begin_ClientConn(const ClientInfo: IXmlNode; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'UKLibrary', __InterfaceName, '_ClientConn');
    lMessage.Write('ClientInfo', System.TypeInfo(IXmlNode), ClientInfo, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TLogonService_AsyncProxyEx.End_ClientConn(out ServerInfo: IXmlNode; const aRequest: IROAsyncRequest): Boolean;
var
  lResult: Boolean;
begin
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Boolean), lResult, []);
  aRequest.Message.Read('ServerInfo', System.TypeInfo(IXmlNode), ServerInfo, []);
  result := lResult;
  exit;
end;

class function CoAppService.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IAppService;
begin
  result := TAppService_Proxy.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoAppService.Create(const aUri: TROUri; aDefaultNamespaces: String = ''): IAppService;
begin
  result := TAppService_Proxy.Create(aUri, aDefaultNamespaces);
  exit;
end;

class function CoAppService.Create(const aUrl: String; aDefaultNamespaces: String = ''): IAppService;
begin
  result := TAppService_Proxy.Create(aUrl, aDefaultNamespaces);
  exit;
end;

class function CoAppService_Async.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IAppService_Async;
begin
  result := TAppService_AsyncProxy.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoAppService_Async.Create(const aUri: TROUri; aDefaultNamespaces: String = ''): IAppService_Async;
begin
  result := TAppService_AsyncProxy.Create(aUri, aDefaultNamespaces);
  exit;
end;

class function CoAppService_Async.Create(const aUrl: String; aDefaultNamespaces: String = ''): IAppService_Async;
begin
  result := TAppService_AsyncProxy.Create(aUrl, aDefaultNamespaces);
  exit;
end;

class function CoAppService_AsyncEx.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IAppService_AsyncEx;
begin
  result := TAppService_AsyncProxyEx.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoAppService_AsyncEx.Create(const aUri: TROUri; aDefaultNamespaces: String = ''): IAppService_AsyncEx;
begin
  result := TAppService_AsyncProxyEx.Create(aUri, aDefaultNamespaces);
  exit;
end;

class function CoAppService_AsyncEx.Create(const aUrl: String; aDefaultNamespaces: String = ''): IAppService_AsyncEx;
begin
  result := TAppService_AsyncProxyEx.Create(aUrl, aDefaultNamespaces);
  exit;
end;

function TAppService_Proxy.__GetInterfaceName: String;
begin
  result := 'AppService';
  exit;
end;

function TAppService_Proxy.GetSessionID(const NewParam: UnicodeString): UnicodeString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: UnicodeString;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'UKLibrary', __InterfaceName, 'GetSessionID');
    lMessage.Write('NewParam', System.TypeInfo(UnicodeString), NewParam, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(UnicodeString), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAppService_AsyncProxy.__GetInterfaceName: String;
begin
  result := 'AppService';
  exit;
end;

procedure TAppService_AsyncProxy.Invoke_GetSessionID(const NewParam: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('GetSessionID');

    lMessage.InitializeRequestMessage(lTransportChannel, 'UKLibrary', __InterfaceName, 'GetSessionID');
    lMessage.Write('NewParam', System.TypeInfo(UnicodeString), NewParam, []);
    __DispatchAsyncRequest('GetSessionID', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TAppService_AsyncProxy.Retrieve_GetSessionID: UnicodeString;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: UnicodeString;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('GetSessionID');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(UnicodeString), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free();
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAppService_AsyncProxyEx.__GetInterfaceName: String;
begin
  result := 'AppService';
  exit;
end;

function TAppService_AsyncProxyEx.BeginGetSessionID(const NewParam: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'UKLibrary', __InterfaceName, 'GetSessionID');
    lMessage.Write('NewParam', System.TypeInfo(UnicodeString), NewParam, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAppService_AsyncProxyEx.EndGetSessionID(const aRequest: IROAsyncRequest): UnicodeString;
var
  lResult: UnicodeString;
begin
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(UnicodeString), lResult, []);
  result := lResult;
  exit;
end;

initialization
  RegisterProxyClass(ILogonService_IID, TLogonService_Proxy);
  RegisterProxyClass(IAppService_IID, TAppService_Proxy);
finalization
  UnregisterProxyClass(ILogonService_IID);
  UnregisterProxyClass(IAppService_IID);
end.

